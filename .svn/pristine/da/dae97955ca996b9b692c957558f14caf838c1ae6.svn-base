package com.ensis.bloodgroup.dao.organization;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;

import com.ensis.bloodgroup.dao.HibernateUtil;
import com.ensis.bloodgroup.dto.NotificationDTO;
import com.ensis.bloodgroup.dto.OrganizationDTO;
import com.ensis.bloodgroup.dto.UsersDTO;

public class OrganizationDAO {
	@Autowired
	private HibernateUtil hibernateUtil;

	@Autowired
	private SessionFactory sessionFactory;

	public boolean insertOrganizationInformation(OrganizationDTO orgdto) {

		Object obj = hibernateUtil.create(orgdto);
		if (obj != null) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 * 
	 * @param organizationid
	 * @return
	 */
	public String getOrganizationName(int organizationid) {

		String organizationName = null;
		try {

			Session session = sessionFactory.getCurrentSession();
			String hql = "FROM OrganizationDTO o WHERE o.organizationid = :organizationid";
			Query query = session.createQuery(hql);
			query.setParameter("organizationid", organizationid);

			List results = query.list();
			Iterator itr = results.iterator();
			session.flush();
			session.clear();
			if (itr.hasNext()) {

				OrganizationDTO organization = (OrganizationDTO) itr.next();
				organizationName = organization.getOrganizationname();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return organizationName;

	}

	/**
	 * 
	 * @param userid
	 * @return
	 */
	public int userExistOrNor(int userId) {

		int userid = 0;
		try {

			Session session = sessionFactory.getCurrentSession();
			String hql = "FROM UsersDTO o WHERE o.userid = :userid";
			Query query = session.createQuery(hql);
			query.setParameter("userid", userId);

			List results = query.list();
			Iterator itr = results.iterator();
			session.flush();
			session.clear();
			if (itr.hasNext()) {

				UsersDTO organization = (UsersDTO) itr.next();
				userid = organization.getUserid();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return userid;

	}

	/**
	 * 
	 * @param notification
	 * @return
	 */
	public boolean saveUserNotificationObj(NotificationDTO notification) {

		NotificationDTO modelObj = checkDeviceRegisteredOrNot(notification);
		if (modelObj != null) {

			modelObj.setGcmid(notification.getGcmid());
			modelObj.setUpdatedby("" + modelObj.getUserid());
			modelObj.setUpdateddate(new Date());
			Object obj = hibernateUtil.update(modelObj);
			if (obj != null)
				return true;
			return false;

		} else {

			Object obj = hibernateUtil.create(notification);
			if (obj != null)
				return true;
			return false;
		}

	}

	/**
	 * 
	 * @param userNotificationDTO
	 * @return
	 */
	public NotificationDTO checkDeviceRegisteredOrNot(
			NotificationDTO userNotificationDTO) {

		try {

			String hql = "FROM NotificationDTO u WHERE "
					+ "u.userid = :userId AND" + " u.deviceid=:deviceId AND"
					+ " u.devicetype=:deviceType";
			Session session = sessionFactory.getCurrentSession();
			Query query = session.createQuery(hql);
			query.setParameter("userId", userNotificationDTO.getUserid());
			query.setParameter("deviceId", userNotificationDTO.getDeviceid());
			query.setParameter("deviceType",
					userNotificationDTO.getDevicetype());

			List<?> results = query.list();
			Iterator<?> itr = results.iterator();
			while (itr.hasNext()) {
				NotificationDTO modelObj = (NotificationDTO) itr.next();
				return modelObj;
			}
			session.flush();
			session.clear();

		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 
	 * @param userId
	 * @return
	 */
	public ArrayList<NotificationDTO> getUserDeviceInfo(int userId) {

		try {

			ArrayList<NotificationDTO> devicesList = new ArrayList<NotificationDTO>();
			String hql = "FROM NotificationDTO u WHERE " + "u.userid = :userId";
			Session session = sessionFactory.getCurrentSession();
			Query query = session.createQuery(hql);
			query.setParameter("userId", userId);

			List<?> results = query.list();
			Iterator<?> itr = results.iterator();
			while (itr.hasNext()) {
				NotificationDTO userNotificationDTO = (NotificationDTO) itr
						.next();
				devicesList.add(userNotificationDTO);
			}
			session.flush();
			session.clear();
			return devicesList;

		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}

	}

	/**
	 * 
	 * @param patientid
	 * @return
	 */
	public OrganizationDTO getOrganizationInfo(int userid) {

		Session session = sessionFactory.getCurrentSession();
		Query query = session
				.createQuery("from OrganizationDTO o where o.userid="
						+ userid);
		List<OrganizationDTO> patientRegList = query.list();
		Iterator<?> patientIter = patientRegList.iterator();
		session.flush();
		session.clear();
		while (patientIter.hasNext()) {
			OrganizationDTO organization = (OrganizationDTO) patientIter.next();
			return organization;
		}
		return null;
	}

}
