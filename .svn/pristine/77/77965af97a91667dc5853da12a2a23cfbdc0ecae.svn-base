package com.ensis.bloodgroup.dao.common;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.hibernate.transform.Transformers;
import org.springframework.beans.factory.annotation.Autowired;

import com.ensis.bloodgroup.dao.HibernateUtil;
import com.ensis.bloodgroup.dto.DonarsDTO;
import com.ensis.bloodgroup.dto.DonateRequestDTO;
import com.ensis.bloodgroup.dto.MedicalTestDTO;
import com.ensis.bloodgroup.dto.UsersDTO;

public class CommonDAO {

	@Autowired
	private HibernateUtil hibernateUtil;

	@Autowired
	private SessionFactory sessionFactory;

	/**
	 * 
	 * @param email
	 * @return
	 */

	public List<?> getPatientLoginUserId(String email) {

		Session session = sessionFactory.getCurrentSession();
		Query query = session.createSQLQuery("CALL DonarLogin(:email)")
				.addEntity(UsersDTO.class).setParameter("email", email);
		List<?> list = query.list();
		session.flush();
		session.clear();
		return list;
	}

	/**
	 * 
	 * @param email
	 * @param password
	 * @param type
	 * @return
	 */
	public List<?> validateUserLogin(String email, String password, int type) {

		Session session = sessionFactory.getCurrentSession();
		Criteria criteria = session.createCriteria(UsersDTO.class);
		criteria.add(Restrictions.eq("email", email));
		criteria.add(Restrictions.eq("password", password));
		criteria.add(Restrictions.eq("usertype", type));
		// result will stored in list object.
		List<?> list = criteria.list();
		session.flush();
		session.clear();
		return list;
	}

	/**
	 * 
	 * @param location
	 * @return
	 */
	public List<?> getDonersList(String bloodGroup) {

		Session session = sessionFactory.getCurrentSession();
		SQLQuery sqlQuery = (SQLQuery) session.createSQLQuery(
				"CALL getBloodGroupDoners(:bloodGroup)").setResultTransformer(
				Transformers.aliasToBean(DonarsDTO.class));

		// sqlQuery.setParameter("location", location);
		sqlQuery.setParameter("bloodGroup", bloodGroup);

		List<DonarsDTO> list = sqlQuery.list();
		session.flush();
		session.clear();
		return list;
	}

	/**
	 * 
	 * @param userOj
	 * @return
	 */
	public int donateRequest(DonateRequestDTO donate) {

		int requestID = 0;
		Object obj = hibernateUtil.create(donate);
		if (obj != null) {

			
			Session session = sessionFactory.getCurrentSession();
			 requestID = (Integer)
			 session.createCriteria(DonateRequestDTO.class)
			 .setProjection(Projections.max("requestid")).uniqueResult();
			session.flush();
			session.clear();
			return requestID;

		} else {

			return requestID;
		}
	}

	/**
	 * 
	 * @param userid
	 * @return
	 */
	public String getEmailIdByUserID(int userid) {

		String email = null;
		try {

			Session session = sessionFactory.getCurrentSession();
			String hql = "FROM UsersDTO u WHERE u.userid = :userid";
			Query query = session.createQuery(hql);
			query.setParameter("userid", userid);

			List results = query.list();
			Iterator itr = results.iterator();
			session.flush();
			session.clear();
			if (itr.hasNext()) {

				UsersDTO users = (UsersDTO) itr.next();
				email = users.getEmail();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return email;

	}
	
	/**
	 * 
	 * @param emailid
	 * @return
	 */
	public int EmailExistOrNot(String emailid){
		int response = 0;
		try {

			Session session = sessionFactory.getCurrentSession();
			String hql = "FROM UsersDTO u WHERE u.email = :email";
			Query query = session.createQuery(hql);
			query.setParameter("email", emailid);

			List results = query.list();
			Iterator itr = results.iterator();
			session.flush();
			session.clear();
			if (itr.hasNext()) {

				UsersDTO users = (UsersDTO) itr.next();
				
				response=1;
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return response;
	}

	/**
	 * 
	 * @param userid
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public ArrayList<MedicalTestDTO> getMedicalTest(int userid) {
		ArrayList<MedicalTestDTO> list = new ArrayList<MedicalTestDTO>();
		try {

			Session session = sessionFactory.getCurrentSession();
			String hql = "FROM MedicalTestDTO m WHERE m.userid = :userid";
			Query query = session.createQuery(hql);
			query.setParameter("userid", userid);

			list = (ArrayList<MedicalTestDTO>) query.list();

			session.flush();
			session.clear();

		} catch (Exception e) {
			e.printStackTrace();
		}

		return list;
	}
}
