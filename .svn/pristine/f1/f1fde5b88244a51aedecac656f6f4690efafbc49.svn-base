<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<!--Message Resource Properties -->
	<beans:bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<beans:property name="basename" value="messages" />
	</beans:bean>

	<!-- Multipart Resolver -->
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver" />


	<!-- Data Source Local System -->
<!-- 

	<beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<beans:property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<beans:property name="url"
			value="jdbc:mysql://localhost:3306/bloodgroup" />
		<beans:property name="username" value="root" />
		<beans:property name="password" value="Ensisinfo110@gmail.com" />
	</beans:bean>



 -->


	<!-- Remote DB Connection -->
<!-- 
	<beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<beans:property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<beans:property name="url"
			value="jdbc:mysql://71.36.239.60:3306/bloodgroup" />
		<beans:property name="username" value="root" />
		<beans:property name="password" value="Kris!321" />
	</beans:bean>

 -->
	<!-- Server DB -->

	<beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<beans:property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<beans:property name="url" value="jdbc:mysql://localhost:3306/bloodgroup" />
		<beans:property name="username" value="root" />
		<beans:property name="password" value="Kris!321" />
	</beans:bean>




	<!-- Hibernate 4 SessionFactory Bean definition -->
	<beans:bean id="hibernate4AnnotatedSessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="annotatedClasses">
			<beans:list>
				<beans:value>com.ensis.bloodgroup.dto.DonarsDTO</beans:value>
				<beans:value>com.ensis.bloodgroup.dto.UsersDTO</beans:value>
				<beans:value>com.ensis.bloodgroup.dto.DonateRequestDTO</beans:value>
				<beans:value>com.ensis.bloodgroup.dto.NotificationDTO</beans:value>
				<beans:value>com.ensis.bloodgroup.dto.OrganizationDTO</beans:value>
				<beans:value>com.ensis.bloodgroup.dto.ProfileImageDTO</beans:value>
				<beans:value>com.ensis.bloodgroup.dto.MedicalTestDTO</beans:value>
				<beans:value>com.ensis.bloodgroup.dto.RequestedDonorsListDTO
				</beans:value>
				<beans:value>com.ensis.bloodgroup.dto.MessagesDTO</beans:value>
			</beans:list>
		</beans:property>
		<beans:property name="hibernateProperties">
			<beans:props>
				<beans:prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect
				</beans:prop>
				<beans:prop key="hibernate.show_sql">true</beans:prop>
				<beans:prop key="hibernate.jdbc.batch_size">50</beans:prop>

				<beans:prop key="hibernate.c3p0.min_size">5</beans:prop>
				<beans:prop key="hibernate.c3p0.max_size">20</beans:prop>
				<beans:prop key="hibernate.c3p0.timeout">300</beans:prop>
				<beans:prop key="hibernate.c3p0.max_statements">50</beans:prop>
				<beans:prop key="hibernate.c3p0.idle_test_period">3000</beans:prop>

			</beans:props>
		</beans:property>
	</beans:bean>


	<!-- Configure to plugin JSON as request and response in method handler -->
	<beans:bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<beans:property name="messageConverters">
			<beans:list>
				<beans:ref bean="jsonMessageConverter" />
			</beans:list>
		</beans:property>
	</beans:bean>

	<!-- Configure bean to convert JSON to POJO and vice versa -->
	<beans:bean id="jsonMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
	</beans:bean>

	<!-- Production implementation of the JavaMailSender interface, supporting 
		both JavaMail MimeMessages and Spring SimpleMailMessages -->
	<beans:bean id="mailSender"
		class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<beans:property name="host" value="smtp.gmail.com" />
		<beans:property name="port" value="587" />
		<beans:property name="username" value="ensisinfo99@gmail.com" />
		<beans:property name="password" value="System@1" />

		<!-- The name of the property, following JavaBean naming conventions -->
		<beans:property name="javaMailProperties">
			<beans:props>
				<beans:prop key="mail.transport.protocol">smtp</beans:prop>
				<beans:prop key="mail.smtp.auth">true</beans:prop>
				<beans:prop key="mail.smtp.starttls.enable">true</beans:prop>
				<beans:prop key="mail.debug">true</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>

	<!-- common DAO -->
	<beans:bean id="commonDAO" class="com.ensis.bloodgroup.dao.common.CommonDAO" />

	<!-- DAO Decalrations -->
	<beans:bean id="hibernateUtil" class="com.ensis.bloodgroup.dao.HibernateUtil" />
	<beans:bean id="donarRegistrationDAO"
		class="com.ensis.bloodgroup.dao.DonarRegistrationDAO" />
	<beans:bean id="organizationDAO"
		class="com.ensis.bloodgroup.dao.organization.OrganizationDAO" />
	<beans:bean id="listOfServicesDAO" class="com.ensis.bloodgroup.dao.ListOfServicesDAO" />

	<!-- common service -->
	<beans:bean id="commonService"
		class="com.ensis.bloodgroup.service.common.CommonService" />
	<beans:bean id="notifcationService"
		class="com.ensis.bloodgroup.service.common.NotifcationService" />
	<beans:bean id="listOfRequestsService"
		class="com.ensis.bloodgroup.service.ListOfRequestsService" />



	<!--Service Decalrations -->
	<beans:bean id="donarRegistrationService"
		class="com.ensis.bloodgroup.service.DonarRegistrationService" />
	<beans:bean id="organizationService"
		class="com.ensis.bloodgroup.service.organization.OrganizationService" />


	<context:component-scan
		base-package="com.ensis.bloodgroup.controller,com.ensis.bloodgroup.controller.common" />

	<tx:annotation-driven transaction-manager="transactionManager" />

	<beans:bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<beans:property name="sessionFactory"
			ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>


	<!-- For times when you need more complex processing, passing data to the 
		scheduled job -->
	<!-- <beans:bean name="complexJobDetail" class="org.springframework.scheduling.quartz.JobDetailFactoryBean"> 
		<beans:property name="jobClass" value="com.ensis.bloodgroup.service.common.ScheduledJob" 
		/> <beans:property name="jobDataMap"> <beans:map> <beans:entry key="anotherBean" 
		value-ref="anotherBean" /> </beans:map> </beans:property> <beans:property 
		name="durability" value="true" /> </beans:bean> <beans:bean name="complexJobDetail1" 
		class="org.springframework.scheduling.quartz.JobDetailFactoryBean"> <beans:property 
		name="jobClass" value="com.ensis.bloodgroup.service.common.ScheduledJob1" 
		/> <beans:property name="jobDataMap"> <beans:map> <beans:entry key="anotherBean1" 
		value-ref="anotherBean1" /> </beans:map> </beans:property> <beans:property 
		name="durability" value="true" /> </beans:bean> Run the job every 2 seconds 
		with initial delay of 1 second <bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean"> 
		<property name="jobDetail" ref="simpleJobDetail" /> <property name="startDelay" 
		value="1000" /> <property name="repeatInterval" value="2000" /> </bean> Run 
		the job every 5 seconds only on weekends <beans:bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"> 
		<beans:property name="jobDetail" ref="complexJobDetail" /> <beans:property 
		name="cronExpression" value="0 5 15 ? * WED" /> </beans:bean> Run the job 
		every 20 seconds only on weekends <beans:bean id="cronTrigger1" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"> 
		<beans:property name="jobDetail" ref="complexJobDetail1" /> <beans:property 
		name="cronExpression" value="0/20 * * * * ?" /> </beans:bean> Scheduler factory 
		bean to glue together jobDetails and triggers to Configure Quartz Scheduler 
		<beans:bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean"> 
		<beans:property name="jobDetails"> <beans:list> <ref bean="simpleJobDetail" 
		/> <beans:ref bean="complexJobDetail" /> <beans:ref bean="complexJobDetail1" 
		/> </beans:list> </beans:property> <beans:property name="triggers"> <beans:list> 
		<ref bean="simpleTrigger" /> <beans:ref bean="cronTrigger" /> <beans:ref 
		bean="cronTrigger1"/> </beans:list> </beans:property> </beans:bean> -->

</beans:beans>
