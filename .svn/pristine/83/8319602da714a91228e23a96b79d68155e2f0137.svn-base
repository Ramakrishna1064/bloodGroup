/**
 * 
 */
package com.ensis.bloodgroup.service.common;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;

import com.ensis.bloodgroup.dao.DonarRegistrationDAO;
import com.ensis.bloodgroup.dao.common.CommonDAO;
import com.ensis.bloodgroup.dto.DonarsDTO;
import com.ensis.bloodgroup.dto.DonateRequestDTO;
import com.ensis.bloodgroup.dto.MedicalTestDTO;
import com.ensis.bloodgroup.dto.UsersDTO;
import com.ensis.bloodgroup.models.DonarLoginStatusModel;
import com.ensis.bloodgroup.models.DonerMedicalTests;
import com.ensis.bloodgroup.models.GetSearchDonresList;
import com.ensis.bloodgroup.service.DonarRegistrationService;
import com.ensis.bloodgroup.service.organization.OrganizationService;
import com.ensis.bloodgroup.utis.DistanceCalculator;
import com.ensis.bloodgroup.utis.MessageResources;
import com.ensis.bloodgroup.utis.Utilities;

/**
 * @author Ensis
 *
 */
public class CommonService extends MessageResources {

	@Autowired
	CommonDAO commonDAO;

	@Autowired
	DonarRegistrationDAO donarRegistrationDAO;

	@Autowired
	NotifcationService notifcationService;

	@Autowired
	OrganizationService organizationService;

	@Autowired
	DonarRegistrationService donarRegistrationService;

	/**
	 * @return the commonDAO
	 */
	public CommonDAO getCommonDAO() {
		return commonDAO;
	}

	/**
	 * @param commonDAO
	 *            the commonDAO to set
	 */
	public void setCommonDAO(CommonDAO commonDAO) {
		this.commonDAO = commonDAO;
	}

	@Transactional
	public DonarLoginStatusModel validatePatientLogin(UsersDTO user) {

		List list = commonDAO.validateUserLogin(user.getEmail(),
				user.getPassword(), 1);
		DonarLoginStatusModel statusObj = new DonarLoginStatusModel();
		if (list.size() > 0) {

			statusObj.setError(false);
			UsersDTO userObj = (UsersDTO) list.get(0);

			statusObj.setMessage(getMessage("login.success"));
			// get the Patient Id whoever login
			List userIdResult = commonDAO
					.getPatientLoginUserId(user.getEmail());
			UsersDTO patientRegistration = (UsersDTO) userIdResult.get(0);
			// set the Id to Status Obj

			statusObj.setUserid(patientRegistration.getUserid());
			return statusObj;

		} else {
			statusObj.setError(true);

			statusObj.setMessage(getMessage("login.email.password.error"));
			return statusObj;
		}

	}

	@Transactional
	public List<?> getDonersList(String latitude, String longitude,
			String bloodGroup, int userid, int bloodQuantity) {

		DonateRequestDTO donate = new DonateRequestDTO();

		donate.setDonarid(null);
		donate.setBloodgroup(bloodGroup);
		donate.setRequeststatusid(1);
		donate.setOrganizationid(userid);
		donate.setBloodquantity(bloodQuantity);
		donate.setCreateddate(new Date());
		int requestId = commonDAO.donateRequest(donate);

		List<?> list = commonDAO.getDonersList(bloodGroup);
		List<GetSearchDonresList> searchList = new ArrayList<GetSearchDonresList>();
		System.out.println(list.size());
		for (int i = 0; i < list.size(); i++) {

			DonarsDTO donar = (DonarsDTO) list.get(i);

			String donarLatitude = donar.getDonarlatitude();
			String donarLongitude = donar.getDonarlongitude();
			
			Double distanceInKilometes = DistanceCalculator.distance(
					Double.parseDouble(donarLatitude),
					Double.parseDouble(donarLongitude),
					Double.parseDouble(latitude),
					Double.parseDouble(longitude), "K");

			System.out.println("distnace----" + distanceInKilometes);
			
			if (distanceInKilometes <= 2) {

				
			    //if (requestId > 0) {
					GetSearchDonresList donerModel = new GetSearchDonresList();
					ArrayList<DonerMedicalTests> medicacltests = new ArrayList<DonerMedicalTests>();
					donerModel.setEmail(commonDAO.getEmailIdByUserID(donar
							.getUserid()));
					// donerModel.setUserid(donar.getUserid());
					donerModel.setDonarid(donar.getDonarid());
					donerModel.setFirstname(donar.getFirstname());
					donerModel.setLastname(donar.getLastname());
					donerModel.setGender(donar.getGender());
					donerModel.setAge(donar.getAge());
					donerModel.setAddress1(donar.getAddress1());
					donerModel.setAddress2(donar.getAddress2());
					donerModel.setCity(donar.getCity());
					donerModel.setState(donar.getState());
					donerModel.setCountry(donar.getCountry());
					donerModel.setZip(donar.getZip());
					donerModel.setLatitude(donar.getDonarlatitude());
					donerModel.setLongitude(donar.getDonarlongitude());
					donerModel.setBloodgroup(donar.getBloodgroup());
					donerModel.setImageUrl(getMessage("imageUrlPath")
							+ donarRegistrationDAO.getImageName(donar
									.getImageid()));
					donerModel.setMobilenumber(donar.getMobilenumber());
					donerModel.setAlternatemobilenumber(donar
							.getAlternatemobilenumber());
					donerModel.setCreateddate(""
							+ Utilities.convertDateFormat(donar
									.getCreateddate()));
					ArrayList<MedicalTestDTO> medicalTests = commonDAO
							.getMedicalTest(donar.getUserid());
					System.out.println("size--" + medicalTests.size());

					for (MedicalTestDTO dto : medicalTests) {
						DonerMedicalTests test = new DonerMedicalTests();
						test.setComments(dto.getComments());
						test.setMedicaltestname(dto.getMedicaltestname());
						test.setResult(dto.getResult());
						test.setDescription(dto.getDescription());
						test.setTestdate(""
								+ Utilities.convertDateFormat(dto.getTestdate()));
						medicacltests.add(test);

					}
					
					
					donerModel.setMedicacltests(medicacltests);

					organizationService.notifyBloodRequest(userid, bloodGroup,
							bloodQuantity,requestId);

					searchList.add(donerModel);

				//}

			}

		}

		return searchList;

	}

}
