package com.ensis.bloodgroup.service.common;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;

import org.springframework.stereotype.Service;

import com.ensis.bloodgroup.dto.NotificationDTO;
import com.ensis.bloodgroup.models.NotificationBodyModel;
import com.ensis.bloodgroup.models.NotificationMessageModel;
import com.ensis.bloodgroup.models.NotificationRootModel;
import com.ensis.bloodgroup.utis.Constants;
import com.ensis.bloodgroup.utis.MessageResources;
import com.ensis.bloodgroup.utis.Utilities;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;

@Service
public class NotifcationService extends MessageResources {

	/**
	 * 
	 * @param name
	 * @param devicesList
	 * @param treatmentQuestionId
	 */
	public void sendNewQuestionNotification(String name,
			ArrayList<NotificationDTO> devicesList,String bloodgroup,int requestid) {

		try {

			NotificationMessageModel notificationQuestionModel = new NotificationMessageModel();
			notificationQuestionModel.setMessage(name);
			notificationQuestionModel.setBloodgroup(bloodgroup);
			notificationQuestionModel.setRequestid(requestid);
			

			sendCommonNotification(notificationQuestionModel, devicesList,
					"notification.new.treatment.alert");

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public void sendCommonNotification(
			NotificationMessageModel notificationQuestionModel,
			ArrayList<NotificationDTO> devicesList, String messageKey) {

		try {

			System.out.println("-devices size--->" + devicesList.size());

			ArrayList<String> androidGcmList = new ArrayList<String>();
			ArrayList<String> iOSGcmList = new ArrayList<String>();

			for (NotificationDTO ideviceListObject : devicesList) {

				if (ideviceListObject.getDevicetype() == Constants.ANDROID_DEVICE_TYPE) {
					androidGcmList.add(ideviceListObject.getGcmid());

				}
			}

			// Android Notification
			if (androidGcmList.size() > 0) {

				NotificationBodyModel notificationBodyModel = new NotificationBodyModel();
				notificationBodyModel.setSound("default");
				notificationBodyModel.setTitle(getMessage("appname"));
				notificationBodyModel.setBody(notificationQuestionModel
						.getMessage());
				notificationBodyModel.setNotificationType(Utilities
						.getInteger(getMessage(messageKey)));

				notificationBodyModel.setSound("default");

				NotificationRootModel rootObj = new NotificationRootModel();
				rootObj.setPriority("high");
				rootObj.setRegistration_ids(androidGcmList);
				rootObj.setNotification(notificationBodyModel);

				ObjectWriter ow = new ObjectMapper().writer()
						.withDefaultPrettyPrinter();
				String message = ow.writeValueAsString(rootObj);
				sendNotificationtoDevice(message, Constants.ANDROID_GCM_API_KEY);

			}

			// iOS Notification

		} catch (JsonProcessingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public void sendNotificationtoDevice(String json, String apiKey) {

		try {

			URL obj = new URL(Constants.FCM_SERVER_URL);
			HttpURLConnection con = (HttpURLConnection) obj.openConnection();
			con.setRequestMethod("POST");
			con.setRequestProperty("Content-Type", "application/json");
			con.setRequestProperty("Authorization", "key=" + apiKey);

			if (json != null) {

				con.setDoOutput(true);
				OutputStream os = con.getOutputStream();
				OutputStreamWriter osw = new OutputStreamWriter(os, "UTF-8");
				osw.write(json.toString());
				osw.flush();
				osw.close();
			}

			int responseCode = con.getResponseCode();
			System.out.println("POST Response Code :: " + responseCode);

			if (responseCode == HttpURLConnection.HTTP_OK) { // success
				BufferedReader in = new BufferedReader(new InputStreamReader(
						con.getInputStream()));
				String inputLine;
				StringBuffer response = new StringBuffer();

				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				// print result
				System.out.println(response.toString());
			} else {
				System.out.println("POST request not worked");
			}

		} catch (Throwable t) {
			t.printStackTrace();
		}

	}

}
