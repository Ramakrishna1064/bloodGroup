package com.ensis.bloodgroup.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;

import com.ensis.bloodgroup.dao.ListOfServicesDAO;
import com.ensis.bloodgroup.dto.DonateRequestDTO;
import com.ensis.bloodgroup.dto.OrganizationDTO;
import com.ensis.bloodgroup.dto.RequestedDonorsListDTO;
import com.ensis.bloodgroup.models.ChangeRequestStatusModel;
import com.ensis.bloodgroup.models.GetBloodRequestsModel;
import com.ensis.bloodgroup.models.StatusObject;
import com.ensis.bloodgroup.utis.MessageResources;
import com.ensis.bloodgroup.utis.Utilities;

public class ListOfRequestsService extends MessageResources  {
	
	@Autowired
	ListOfServicesDAO listOfServicesDAO;

	public void setListOfServicesDAO(ListOfServicesDAO listOfServicesDAO) {
		this.listOfServicesDAO = listOfServicesDAO;
	}
	
	@Transactional
	public List<GetBloodRequestsModel> getListOfRequests(int donorId) throws Exception {
		List<GetBloodRequestsModel> bloodRequestObj=new ArrayList<GetBloodRequestsModel>();
		
		List<?> list=listOfServicesDAO.getRequest(donorId);
		for(int i=0;i<list.size();i++)
		{
			RequestedDonorsListDTO requestObj = (RequestedDonorsListDTO) list.get(i);
			int reqID=requestObj.getRequestid();
			DonateRequestDTO request=listOfServicesDAO.getRequestDetails(reqID);
			
			
			OrganizationDTO organizationObj=new OrganizationDTO();
			List<?> list2=listOfServicesDAO.getRequestedOrganizationDetails(request.getOrganizationid());
			if(list2.size()>0)
			{
				organizationObj=(OrganizationDTO) list2.get(0);
			}
			GetBloodRequestsModel getBloodRequestsModel=new GetBloodRequestsModel();
			getBloodRequestsModel.setRequestid(requestObj.getRequestid());
			getBloodRequestsModel.setOrganizationid(requestObj.getOrganizationid());
			//getBloodRequestsModel.setDonarid(requestObj.getDonarid());
			getBloodRequestsModel.setRequeststatusid(requestObj.getRequeststatus());
			getBloodRequestsModel.setDonorreqid(requestObj.getDonorreqid());
			getBloodRequestsModel.setBloodgroup(request.getBloodgroup());
			getBloodRequestsModel.setBloodquantity(request.getBloodquantity());
			getBloodRequestsModel.setComments(request.getComments());
			getBloodRequestsModel.setCreateddate(""+Utilities.convertDateFormat(request.getCreateddate()));
			//getBloodRequestsModel.setUpdateddate(requestObj.getUpdateddate());
			//getBloodRequestsModel.setUserid(organizationObj.getUserid());
			getBloodRequestsModel.setOrganizationname(organizationObj.getOrganizationname());
			getBloodRequestsModel.setAddress1(organizationObj.getAddress1());
			getBloodRequestsModel.setAddress2(organizationObj.getAddress2());
			getBloodRequestsModel.setCity(organizationObj.getCity());
			getBloodRequestsModel.setState(organizationObj.getState());
			getBloodRequestsModel.setCountry(organizationObj.getCountry());
			getBloodRequestsModel.setZip(organizationObj.getZip());
			getBloodRequestsModel.setPhonenumber(organizationObj.getPhonenumber());
			getBloodRequestsModel.setMobilenumber(organizationObj.getMobilenumber());
			getBloodRequestsModel.setOrgdescription(organizationObj.getOrgdescription());
			//getBloodRequestsModel.setCreteddate(organizationObj.getCreteddate());
			bloodRequestObj.add(getBloodRequestsModel);
			
		}
		return bloodRequestObj;
	}
	
	
	

	@Transactional
	public StatusObject setRequestStatusFromDonorService(ChangeRequestStatusModel changeRequestStatusModel) throws Exception {
		StatusObject statusObj=new StatusObject();
		List<?> list = listOfServicesDAO.setRequestStatus(changeRequestStatusModel.getRequestid());
		if (list.size() > 0) {
			RequestedDonorsListDTO reqObj = (RequestedDonorsListDTO) list.get(0);
			reqObj.setRequeststatus(changeRequestStatusModel.getStatus());;
			boolean response = listOfServicesDAO.updateStatus(reqObj);
			if (response) {
				statusObj.setError(false);
				statusObj.setMessage(getMessage("request.status.change.success"));
				return statusObj;
			} else {
				statusObj.setError(true);
				statusObj.setMessage(getMessage("request.status.change.fail"));
				return statusObj;
			}
		} else {
			statusObj.setError(true);
			statusObj.setMessage(getMessage("request.notFound"));
			return statusObj;
		}
	}
	
	
	

}
